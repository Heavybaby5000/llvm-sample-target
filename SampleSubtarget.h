//===-- SampleSubtarget.h - Define Subtarget for the Sample ----*- C++ -*--===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the Sample specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_TARGET_SAMPLE_SUBTARGET_H
#define LLVM_TARGET_SAMPLE_SUBTARGET_H

#include "SampleFrameLowering.h"
#include "SampleInstrInfo.h"
#include "SampleISelLowering.h"
#include "SampleSelectionDAGInfo.h"
#include "SampleRegisterInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetSubtargetInfo.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "SampleGenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class SampleSubtarget : public SampleGenSubtargetInfo {
  virtual void anchor() {};
  bool ExtendedInsts;

  const DataLayout DL;
  SampleInstrInfo InstrInfo;
  SampleFrameLowering FrameLowering;
  SampleTargetLowering TLInfo;
  SampleSelectionDAGInfo TSInfo;

public:
  /// This constructor initializes the data members to match that
  /// of the specified triple.
  SampleSubtarget(const std::string &TT, const std::string &CPU,
                  const std::string &FS, const SampleTargetMachine &TM);

  // Autogenerated by tblgen.
  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  virtual const SampleInstrInfo *getInstrInfo() const {
    return &InstrInfo;
  }
  virtual const SampleRegisterInfo *getRegisterInfo() const {
    return &getInstrInfo()->getRegisterInfo();
  }
  virtual const DataLayout *getDataLayout() const {
    return &DL;
  }
  virtual const SampleTargetLowering *getTargetLowering() const {
    return &TLInfo;
  }
  virtual const SampleFrameLowering *getFrameLowering() const{
    return &FrameLowering;
  }
  virtual const SampleSelectionDAGInfo* getSelectionDAGInfo() const {
    return &TSInfo;
  }
};
} // End llvm namespace

#endif  // LLVM_TARGET_SAMPLE_SUBTARGET_H
