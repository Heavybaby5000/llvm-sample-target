diff --git a/llvm/CMakeLists.txt b/llvm/CMakeLists.txt
index 4dd43e7c5087..d3639c96f65b 100644
--- a/llvm/CMakeLists.txt
+++ b/llvm/CMakeLists.txt
@@ -216,6 +216,7 @@ set(LLVM_ALL_TARGETS
   SystemZ
   X86
   XCore
+  Sample
   )
 
 # List of targets with JIT support:
diff --git a/llvm/include/llvm/ADT/Triple.h b/llvm/include/llvm/ADT/Triple.h
index e01db0a61fd5..e5eabd58864e 100644
--- a/llvm/include/llvm/ADT/Triple.h
+++ b/llvm/include/llvm/ADT/Triple.h
@@ -88,7 +88,8 @@ public:
     shave,      // SHAVE: Movidius vector VLIW processors
     wasm32,     // WebAssembly with 32-bit pointers
     wasm64,     // WebAssembly with 64-bit pointers
-    LastArchType = wasm64
+    sample,     // Sample: sample
+    LastArchType = sample
   };
   enum SubArchType {
     NoSubArch,
diff --git a/llvm/include/llvm/IR/ValueMap.h b/llvm/include/llvm/IR/ValueMap.h
index ad518ac053b2..b9f9744d7cba 100644
--- a/llvm/include/llvm/IR/ValueMap.h
+++ b/llvm/include/llvm/IR/ValueMap.h
@@ -99,7 +99,7 @@ public:
   explicit ValueMap(const ExtraData &Data, unsigned NumInitBuckets = 64)
       : Map(NumInitBuckets), Data(Data) {}
 
-  bool hasMD() const { return MDMap; }
+  bool hasMD() const { return bool(MDMap); }
   MDMapT &MD() {
     if (!MDMap)
       MDMap.reset(new MDMapT);
diff --git a/llvm/lib/Support/Triple.cpp b/llvm/lib/Support/Triple.cpp
index 11afcf7f0adc..babb075de0d0 100644
--- a/llvm/lib/Support/Triple.cpp
+++ b/llvm/lib/Support/Triple.cpp
@@ -63,6 +63,7 @@ const char *Triple::getArchTypeName(ArchType Kind) {
   case shave:       return "shave";
   case wasm32:      return "wasm32";
   case wasm64:      return "wasm64";
+  case sample:      return "sample";
   }
 
   llvm_unreachable("Invalid ArchType!");
@@ -271,6 +272,7 @@ Triple::ArchType Triple::getArchTypeForLLVMName(StringRef Name) {
     .Case("shave", shave)
     .Case("wasm32", wasm32)
     .Case("wasm64", wasm64)
+    .Case("sample", sample)
     .Default(UnknownArch);
 }
 
@@ -379,6 +381,7 @@ static Triple::ArchType parseArch(StringRef ArchName) {
     .Case("shave", Triple::shave)
     .Case("wasm32", Triple::wasm32)
     .Case("wasm64", Triple::wasm64)
+    .Case("sample", Triple::sample)
     .Default(Triple::UnknownArch);
 
   // Some architectures require special parsing logic just to compute the
@@ -585,6 +588,7 @@ static Triple::ObjectFormatType getDefaultFormat(const Triple &T) {
   case Triple::wasm32:
   case Triple::wasm64:
   case Triple::xcore:
+  case Triple::sample:
     return Triple::ELF;
 
   case Triple::ppc:
@@ -1113,6 +1117,7 @@ static unsigned getArchPointerBitWidth(llvm::Triple::ArchType Arch) {
   case llvm::Triple::kalimba:
   case llvm::Triple::shave:
   case llvm::Triple::wasm32:
+  case llvm::Triple::sample:
     return 32;
 
   case llvm::Triple::aarch64:
@@ -1186,6 +1191,7 @@ Triple Triple::get32BitArchVariant() const {
   case Triple::xcore:
   case Triple::shave:
   case Triple::wasm32:
+  case Triple::sample:
     // Already 32-bit.
     break;
 
@@ -1219,6 +1225,7 @@ Triple Triple::get64BitArchVariant() const {
   case Triple::xcore:
   case Triple::sparcel:
   case Triple::shave:
+  case Triple::sample:
     T.setArch(UnknownArch);
     break;
 
@@ -1288,6 +1295,7 @@ Triple Triple::getBigEndianArchVariant() const {
   case Triple::x86:
   case Triple::x86_64:
   case Triple::xcore:
+  case Triple::sample:
 
   // ARM is intentionally unsupported here, changing the architecture would
   // drop any arch suffixes.
@@ -1367,6 +1375,7 @@ Triple Triple::getLittleEndianArchVariant() const {
   case Triple::x86:
   case Triple::x86_64:
   case Triple::xcore:
+  case Triple::sample:
     // Already little endian.
     break;
 
diff --git a/llvm/lib/Target/LLVMBuild.txt b/llvm/lib/Target/LLVMBuild.txt
index eb794ebc7216..f59179be3a4c 100644
--- a/llvm/lib/Target/LLVMBuild.txt
+++ b/llvm/lib/Target/LLVMBuild.txt
@@ -35,6 +35,7 @@ subdirectories =
  WebAssembly
  X86
  XCore
+ Sample
 
 ; This is a special group whose required libraries are extended (by llvm-build)
 ; with the best execution engine (the native JIT, if available, or the
